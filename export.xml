<!-- wp:paragraph -->
<p>Project on <a href="https://github.com/jasontsemf/DumbSmartSwitch">GitHub</a></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">Disclaimer: This week's project is rather basic.</pre>
<!-- /wp:preformatted -->

<!-- wp:heading {"level":1} -->
<h1>Intro</h1>
<!-- /wp:heading -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>Dumb Smart Switch is a BLE powered switch that enables the user to push any existing (dumb) switch/buttons for your home and appliances in a rather "smart" way. It also has schedule functionality to perform routines.</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>My all time inspiration for my projects is always my tiny little problem in my life, or just some minor frustrations that I have. This is my attempt to solve my problem of "not willing to leave my bed to switch off my light".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I live in an apartment and I will be moving out very soon (hopefully). I will never invest in an expensive system of smart home devices as it is expensive an unnecessary. What I need is:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>a simple device that pushes a physical light, to switch off my ceiling light, where the switch is mounted on a wall</li><li>a daily repeating routine that switches off my light, just in case if I fall asleep with my lights on</li><li>a device that is not permanent and fits well into my existing home setting that is not changeable</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":1} -->
<h1>Solution</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>So the solution is this Dumb Smart Switch. A servo motor mounted on the wall that drives a pinion gear combo that pushes the light switch on the wall with a bluetooth trigger, or a daily repeating routine.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":1} -->
<h1>Tech Spec</h1>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The project is put together with</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Arduino Nano IoT 33<ul><li>the brain for driving the entire project</li><li>takes 5V USB power</li><li>has BLE connectivity for accessing it with my smartphone</li></ul></li><li>DS3231 Rtc (real time clock)module<ul><li>it keeps and tells time</li></ul></li><li><a href="https://www.adafruit.com/product/169?gclid=Cj0KCQiAyJOBBhDCARIsAJG2h5dvq7mFnts-v3AY0nxejoEeZZMW6g2N18gsuS4jWW6F7LTDEu5TvksaAvr0EALw_wcB">A mini servo</a><ul><li>drives pinion to push the light switch</li></ul></li><li>A custom 3D printed servo mount, gear, and pushed</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Using a generic BLE app on a smartphone, like LightBlue, I am able to perform</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>trigger the device to push the switch on the wall</li><li>set hour to perform routine</li><li>set minute to perform routine</li><li>set master switch for the routine</li></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2>Electronics</h2>
<!-- /wp:heading -->

<!-- wp:image {"id":2288,"sizeSlug":"large","linkDestination":"media"} -->
<figure class="wp-block-image size-large"><a href="https://jason1996429.files.wordpress.com/2021/02/dumbsmartswitchbread_bb.png"><img src="https://jason1996429.files.wordpress.com/2021/02/dumbsmartswitchbread_bb.png?w=1024" alt="" class="wp-image-2288"/></a></figure>
<!-- /wp:image -->

<!-- wp:image {"id":2290,"sizeSlug":"large","linkDestination":"media"} -->
<figure class="wp-block-image size-large"><a href="https://jason1996429.files.wordpress.com/2021/02/dumbsmartswitchbread_schem.png"><img src="https://jason1996429.files.wordpress.com/2021/02/dumbsmartswitchbread_schem.png?w=777" alt="" class="wp-image-2290"/></a></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2>3D printing</h2>
<!-- /wp:heading -->

<!-- wp:image {"id":2295,"sizeSlug":"large","linkDestination":"media"} -->
<figure class="wp-block-image size-large"><a href="https://jason1996429.files.wordpress.com/2021/02/screen-shot-2021-02-11-at-4.51.00-pm.png"><img src="https://jason1996429.files.wordpress.com/2021/02/screen-shot-2021-02-11-at-4.51.00-pm.png?w=1024" alt="" class="wp-image-2295"/></a><figcaption>https://mynyu308.autodesk360.com/g/shares/SH919a0QTf3c32634dcf349a13f1866050e3?viewState=NoIgbgDAdAjCA0IDeAdEAXAngBwKZoC40ARXAZwEsBzAOzXjQEMyzd1C0AjAZgCYBWACbdcMALSCIuACxjpowWMaD%2BnMZwCcjTgDMAHDv46NMDWgC%2BIALpA</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {"id":2301,"sizeSlug":"large","linkDestination":"media"} -->
<figure class="wp-block-image size-large"><a href="https://jason1996429.files.wordpress.com/2021/02/screen-shot-2021-02-11-at-5.12.57-pm.png"><img src="https://jason1996429.files.wordpress.com/2021/02/screen-shot-2021-02-11-at-5.12.57-pm.png?w=1024" alt="" class="wp-image-2301"/></a><figcaption>pusher and gear from https://www.thingiverse.com/thing:3170748</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2>Code</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Please refer to the inline comments for more explanation. Code also available on <a href="https://github.com/jasontsemf/DumbSmartSwitch">GitHub</a>. The code is mostly a Frankenstein of:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="https://github.com/arduino-libraries/ArduinoBLE/tree/master/examples/Peripheral/LED">https://github.com/arduino-libraries/ArduinoBLE/tree/master/examples/Peripheral/LED</a></li><li><a href="https://github.com/adafruit/RTClib/tree/master/examples/ds3231">https://github.com/adafruit/RTClib/tree/master/examples/ds3231</a></li><li><a href="https://github.com/arduino-libraries/Servo/tree/master/examples/Sweep">https://github.com/arduino-libraries/Servo/tree/master/examples/Sweep</a></li></ul>
<!-- /wp:list -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#include &lt;ArduinoBLE.h>
#include &lt;Servo.h>
// Date and time functions using a DS3231 RTC connected via I2C and Wire lib
#include "RTClib.h"

RTC_DS3231 rtc;
//char daysOfTheWeek&#91;7]&#91;12] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
Servo myservo;  // create servo object to control a servo
int pos = 0;    // variable to store the servo position

BLEService servoService("19B10000-E8F2-537E-4F6C-D104768A1214"); // BLE LED Service

// BLE LED Switch Characteristic - custom 128-bit UUID, read and writable by central
BLEByteCharacteristic switchCharacteristic("19B10001-E8F2-537E-4F6C-D104768A1214", BLERead | BLEWrite);
BLEByteCharacteristic hourCharacteristic("19B10002-E8F2-537E-4F6C-D104768A1214", BLERead | BLEWrite);
BLEByteCharacteristic minuteCharacteristic("19B10003-E8F2-537E-4F6C-D104768A1214", BLERead | BLEWrite);
BLEByteCharacteristic repeatCharacteristic("19B10004-E8F2-537E-4F6C-D104768A1214", BLERead | BLEWrite);

// time updating anc checking interval
unsigned long previousMillis = 0;
const long interval = 45000;  // 45 seconds

void setup() {
  Serial.begin(9600);
//  while (!Serial);

  // rtc setup
  if (! rtc.begin()) {
    Serial.println("Couldn't find RTC");
    Serial.flush();
    abort();
  }

  if (rtc.lostPower()) {
    Serial.println("RTC lost power, let's set the time!");
    // When time needs to be set on a new device, or after a power loss, the
    // following line sets the RTC to the date &amp; time this sketch was compiled
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
    // This line sets the RTC with an explicit date &amp; time, for example to set
    // January 21, 2014 at 3am you would call:
    // rtc.adjust(DateTime(2014, 1, 21, 3, 0, 0));
  }

  // servo setup
  myservo.attach(2);  // attaches the servo on pin 9 to the servo object

  // begin initialization
  if (!BLE.begin()) {
    Serial.println("starting BLE failed!");

    while (1);
  }

  // set advertised local name and service UUID:
  BLE.setLocalName("Servo");
  BLE.setAdvertisedService(servoService);

  // add the characteristic to the service
  servoService.addCharacteristic(switchCharacteristic);
  servoService.addCharacteristic(hourCharacteristic);
  servoService.addCharacteristic(minuteCharacteristic);
  servoService.addCharacteristic(repeatCharacteristic);

  // add service
  BLE.addService(servoService);

  // set the initial value for the characeristic:
  switchCharacteristic.writeValue(0);
  hourCharacteristic.writeValue(0);
  minuteCharacteristic.writeValue(1);
  repeatCharacteristic.writeValue(1);

  // start advertising
  BLE.advertise();

  Serial.println("BLE LED Peripheral");
}

void loop() {
  // update millis
  unsigned long currentMillis = millis();

  if (currentMillis - previousMillis >= interval) {
    // save the last time you blinked the LED
    previousMillis = currentMillis;

    DateTime now = rtc.now();
    if (repeatCharacteristic.value()) {               // check if it is set to repeat daily
//      Serial.print(hourCharacteristic.value());
      // check if it is the right time to push button
      if (now.hour() == hourCharacteristic.value()
          &amp;&amp; now.minute() == minuteCharacteristic.value()) {
        moveServo();
      }
    }
  }

  // listen for BLE peripherals to connect:
  BLEDevice central = BLE.central();

  // if a central is connected to peripheral:
  if (central) {
    Serial.print("Connected to central: ");
    // print the central's MAC address:
    Serial.println(central.address());

    // while the central is still connected to peripheral:
    while (central.connected()) {
      // if the remote device wrote to the characteristic,
      // use the value to control the LED:
      if (switchCharacteristic.written()) {
        if (switchCharacteristic.value()) {   // any value other than 0
          moveServo();
          switchCharacteristic.writeValue(0);
        } else {                              // a 0 value
          //          Serial.println(F("nothing"));
        }
      }
    }

    // when the central disconnects, print it out:
    Serial.print(F("Disconnected from central: "));
    Serial.println(central.address());
  }


}

void moveServo() {
  Serial.println("move servo");
  for (pos = 0; pos &lt;= 180; pos += 1) { // goes from 0 degrees to 180 degrees
    // in steps of 1 degree
    myservo.write(pos);              // tell servo to go to position in variable 'pos'
    delay(15);                       // waits 15ms for the servo to reach the position
  }
  for (pos = 180; pos >= 0; pos -= 1) { // goes from 180 degrees to 0 degrees
    myservo.write(pos);              // tell servo to go to position in variable 'pos'
    delay(15);                       // waits 15ms for the servo to reach the position
  }
}</code></pre>
<!-- /wp:code -->